<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generate Prescription</title>
    <script src="index.js"></script>
    <style>
        /* Basic Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Navbar */
        .navbar {
            background-color: #28a745; /* Green color */
            color: #fff;
            padding: 15px 20px;
            display: flex;
            align-items: center;
            justify-content: center; /* Center the content */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            position: relative; /* For positioning the logo */
        }

        .navbar h1 {
            margin: 0;
            font-size: 24px;
            text-align: center;
        }

        .navbar img {
            position: absolute;
            left: 20px;
            height: 40px;
            width: 40px;
        }

        /* Container */
        .container {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        /* Editor */
        .editor {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            position: relative;
            background: #fff;
        }

        .toolbar {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .toolbar button {
            padding: 8px 12px;
            border: none;
            background-color: #e0e0e0;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

        .toolbar button:hover {
            background-color: #ddd;
        }

        .text-area {
            width: 100%;
            min-height: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-break: break-word;
            background: #f9f9f9;
        }

        /* Plus Button */
        .plus-button {
            position: absolute;
            bottom: 10px;
            right: 10px;
            padding: 10px;
            font-size: 24px;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 50%;
            cursor: pointer;
        }

        /* Buttons */
        .buttons {
            margin-top: 20px;
            display: flex;
            gap: 20px;
        }

        .green-button {
            background-color: #28a745;
            color: #fff;
            padding: 15px 25px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: background-color 0.3s;
        }

        .green-button:hover {
            background-color: #218838;
        }

        .emoji-options {
            display: flex;
            gap: 5px;
            margin-top: 10px;
        }

        .emoji {
            font-size: 24px;
            cursor: pointer;
            border: 1px solid #ddd;
            padding: 5px;
            border-radius: 5px;
            background-color: #fff;
        }

        .emoji.selected {
            background-color: #007bff;
            color: #fff;
        }

        .time-section {
            margin-top: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        select, input[type="number"] {
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        select {
            width: 80px;
        }

        .am-pm {
            display: flex;
            gap: 5px;
        }

        .am-pm button {
            padding: 5px 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
        }

        .am-pm button.selected {
            background-color: #007bff;
            color: #fff;
        }

        /* Treatment Goals and Doctor's Remarks */
        .remarks-section {
            margin-top: 20px;
        }

        .remarks-section h2 {
            font-size: 20px;
            margin-bottom: 10px;
            color: #333;
        }

        .remarks-section textarea {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 10px;
            resize: vertical;
        }
    </style>
</head>
<body>
    <div class="navbar">
        <img src="logo.jpg" alt="Hospital Logo"> <!-- Placeholder for hospital logo -->
        <h1>Generate Prescription</h1>
    </div>
    <div class="container">
        <div class="editor">
            <div class="toolbar">
                <button onclick="document.execCommand('bold', false, '')">Bold</button>
                <button onclick="document.execCommand('underline', false, '')">Underline</button>
                <button onclick="changeTextTransform('capitalize')">Capitalize</button>
                <button onclick="changeTextTransform('lowercase')">Lowercase</button>
            </div>
            <div id="text-area" class="text-area" contenteditable="true" placeholder="Write your medicine schedule here..."></div>
            <button class="plus-button" onclick="addMedicine()">+</button>
        </div>

        <!-- Treatment Goals and Doctor's Remarks Section -->
        <div class="remarks-section">
            <h2>Treatment Goals</h2>
            <textarea id="treatment-goals" placeholder="Enter treatment goals here..."></textarea>

            <h2>Doctor's Remarks</h2>
            <textarea id="doctors-remarks" placeholder="Enter doctor's remarks here..."></textarea>
        </div>

        <div class="buttons">
            <button class="green-button" onclick="generatePrescription()">Generate Prescription</button>
            <button class="green-button" onclick="generateTreatmentPlan()">Generate Treatment Plan</button>
        </div>
    </div>

    <script>
        let medicineCount = 0;
    
        function addMedicine() {
            medicineCount++;
    
            const medicineDiv = document.createElement('div');
            medicineDiv.classList.add('medicine');
            medicineDiv.id = `medicine-${medicineCount}`;
    
            const medicineInput = document.createElement('input');
            medicineInput.type = 'text';
            medicineInput.placeholder = 'Medicine Name';
            medicineInput.dataset.count = medicineCount; // Add a dataset attribute to track the count
    
            const emojis = ['ðŸŒž', 'ðŸŒœ', 'ðŸŒ„', 'ðŸŒ†'];
            const timesOfDay = ['Morning', 'Afternoon', 'Evening', 'Night'];
    
            let emojiDiv = document.createElement('div');
            emojiDiv.classList.add('emoji-options');
            emojis.forEach((emoji, index) => {
                const button = document.createElement('button');
                button.innerText = emoji;
                button.classList.add('emoji');
                button.addEventListener('click', () => {
                    document.querySelectorAll(`#medicine-${medicineCount} .emoji`).forEach(btn => btn.classList.remove('selected'));
                    button.classList.add('selected');
                    medicineInput.dataset.timeOfDay = timesOfDay[index];
                });
                emojiDiv.appendChild(button);
            });
    
            const timeSection = document.createElement('div');
            timeSection.classList.add('time-section');
            timeSection.innerHTML = `
                <select id="hour-${medicineCount}" class="time-select">
                    ${Array.from({length: 12}, (_, i) => `<option value="${i+1}">${i+1}</option>`).join('')}
                </select>
                <select id="minute-${medicineCount}" class="time-select">
                    ${Array.from({length: 60}, (_, i) => `<option value="${i < 10 ? '0' + i : i}">${i < 10 ? '0' + i : i}</option>`).join('')}
                </select>
                <div class="am-pm">
                    <button id="am-${medicineCount}" onclick="selectAMPM('AM', ${medicineCount})" class="am-pm-button">AM</button>
                    <button id="pm-${medicineCount}" onclick="selectAMPM('PM', ${medicineCount})" class="am-pm-button">PM</button>
                </div>
            `;
    
            const plusButton = document.createElement('button');
            plusButton.classList.add('plus-button');
            plusButton.innerText = '+';
            plusButton.onclick = addMedicine;
    
            medicineDiv.appendChild(medicineInput);
            medicineDiv.appendChild(emojiDiv);
            medicineDiv.appendChild(timeSection);
            medicineDiv.appendChild(plusButton);
    
            document.getElementById('text-area').appendChild(medicineDiv);
            document.getElementById('text-area').appendChild(document.createElement('br'));
    
            // Ensure the text area grows with content
            document.querySelector('.text-area').scrollTop = document.querySelector('.text-area').scrollHeight;
        }
    
        function selectAMPM(amPm, count) {
            document.querySelector(`#am-${count}`).classList.remove('selected');
            document.querySelector(`#pm-${count}`).classList.remove('selected');
            document.querySelector(`#${amPm.toLowerCase()}-${count}`).classList.add('selected');
        }
    
        function changeTextTransform(transformType) {
            document.execCommand(transformType, false, '');
        }
    
        async function generatePrescription() {
            const medicineElements = document.querySelectorAll('.medicine');
            const medicines = [];
    
            medicineElements.forEach(medicine => {
                const name = medicine.querySelector('input').value;
                const timeOfDay = medicine.querySelector('.emoji.selected')?.innerText;
                const hour = medicine.querySelector('select[id^="hour-"]').value;
                const minute = medicine.querySelector('select[id^="minute-"]').value;
                const amPm = medicine.querySelector('.am-pm-button.selected')?.innerText;
    
                if (name && timeOfDay && hour && minute && amPm) {
                    medicines.push({
                        name,
                        timeOfDay,
                        time: `${hour}:${minute} ${amPm}`
                    });
                }
            });
    
            const treatmentGoals = document.getElementById('treatment-goals').value;
            const doctorsRemarks = document.getElementById('doctors-remarks').value;
    
            // Prompt for username to avoid hardcoding
            const username = prompt('Enter the username for this prescription:');
            if (!username) {
                alert('Username is required.');
                return;
            }
    
            try {
                const response = await fetch(`/api/generate-prescription?username=${username}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        medicines,
                        treatmentGoals,
                        doctorsRemarks
                    })
                });
                const result = await response.json();
    
                if (result.success) {
                    alert(result.message);
                } else {
                    alert('Failed to generate prescription.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to generate prescription.');
            }
        }
    
        async function generateTreatmentPlan() {
            const treatmentGoals = document.getElementById('treatment-goals').value;
            const doctorsRemarks = document.getElementById('doctors-remarks').value;
    
            try {
                await fetch('/api/generate-treatment-plan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        treatmentGoals,
                        doctorsRemarks
                    })
                });
                alert('Treatment plan generated successfully!');
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to generate treatment plan.');
            }
        }
    </script>
    
</body>
</html>
